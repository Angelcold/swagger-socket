/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.wordnik.sample.api

import com.wordnik.sample.model._

import org.codehaus.jackson.map.DeserializationConfig.Feature
import org.codehaus.jackson.map.ObjectMapper
import org.codehaus.jackson.`type`.TypeReference
import com.wordnik.swagger.runtime.annotations._
import com.wordnik.swagger.runtime.common._
import com.wordnik.swagger.runtime.exception._

import java.io.IOException

import scala.collection.mutable._
import scala.collection.JavaConversions._


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author tony
 *
 */
object PetAPI {

    /**
     * Find pet by ID
     *
     * Returns a pet when ID < 10. ID > 10 or nonintegers will simulate API error conditions
     * 
     * @param petId  ID of pet that needs to be fetched
     *      Allowed values are - range[0.0,10.0]  
     * @return Pet {@link Pet} 
     * @throws APIException 400 - Invalid ID supplied 404 - Pet not found 
     */
     @MethodArgumentNames(value="petId") 
     @throws(classOf[APIException])
     def getPetById(petId:String) :Pet = {

        //parse inputs
        var resourcePath = "/pet.{format}/{petId}".replace("{format}","json")
        val method = "GET";
        var queryParams = new HashMap[String, String]
        var headerParams = new HashMap[String, String]

        if(null != petId) {
            resourcePath = resourcePath.replace("{petId}", APIInvoker.toPathValue(petId))
        }
        
    
        //make the API Call
        val response = APIInvoker.getApiInvoker.invokeAPI(resourcePath, method, queryParams, null, headerParams)
        if(null == response || response.length() == 0){
            null
        }        //create output objects if the response has more than one object
        val responseObject = APIInvoker.deserialize(response, classOf[Pet]).asInstanceOf[Pet]
        responseObject        
                
     }
    /**
     * Finds Pets by status
     *
     * Multiple status values can be provided with comma seperated strings
     * 
     * @param status  Status values that need to be considered for filter
     *      Allowed values are - available,pending,sold  
     * @return List[Pet] {@link Pet} 
     * @throws APIException 400 - Invalid status value 
     */
     @MethodArgumentNames(value="status") 
     @throws(classOf[APIException])
     def findPetsByStatus(status:List[String]) :List[Pet] = {

        //parse inputs
        var resourcePath = "/pet.{format}/findByStatus".replace("{format}","json")
        val method = "GET";
        var queryParams = new HashMap[String, String]
        var headerParams = new HashMap[String, String]

        if(null != status) {
             queryParams += "status" -> APIInvoker.toPathValue(status)
        }

        
    
        //make the API Call
        val response = APIInvoker.getApiInvoker.invokeAPI(resourcePath, method, queryParams, null, headerParams)
        if(null == response || response.length() == 0){
            null
        }        
        val typeRef = new TypeReference[Array[Pet]] {}
        try {
            val responseObject = APIInvoker.mapper.readValue(response, typeRef).asInstanceOf[Array[Pet]]
            responseObject.toList
        } catch { 
        	case ioe:IOException => {
	            val args = Array(response, typeRef.toString())
	            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe)
	        }
	        case _ => throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, "Error in converting response json value to java object")
        }                        
     }
    /**
     * Finds Pets by tags
     *
     * Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.
     * 
     * @param tags  Tags to filter by
 
     * @return List[Pet] {@link Pet} 
     * @throws APIException 400 - Invalid tag value 
     */
     @MethodArgumentNames(value="tags") 
     @throws(classOf[APIException])
     def findPetsByTags(tags:List[String]) :List[Pet] = {

        //parse inputs
        var resourcePath = "/pet.{format}/findByTags".replace("{format}","json")
        val method = "GET";
        var queryParams = new HashMap[String, String]
        var headerParams = new HashMap[String, String]

        if(null != tags) {
             queryParams += "tags" -> APIInvoker.toPathValue(tags)
        }

        
    
        //make the API Call
        val response = APIInvoker.getApiInvoker.invokeAPI(resourcePath, method, queryParams, null, headerParams)
        if(null == response || response.length() == 0){
            null
        }        
        val typeRef = new TypeReference[Array[Pet]] {}
        try {
            val responseObject = APIInvoker.mapper.readValue(response, typeRef).asInstanceOf[Array[Pet]]
            responseObject.toList
        } catch { 
        	case ioe:IOException => {
	            val args = Array(response, typeRef.toString())
	            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe)
	        }
	        case _ => throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, "Error in converting response json value to java object")
        }                        
     }

}