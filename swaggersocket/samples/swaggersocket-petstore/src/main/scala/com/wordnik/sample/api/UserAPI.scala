/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.wordnik.sample.api

import com.wordnik.sample.model._

import org.codehaus.jackson.map.DeserializationConfig.Feature
import org.codehaus.jackson.map.ObjectMapper
import org.codehaus.jackson.`type`.TypeReference
import com.wordnik.swagger.runtime.annotations._
import com.wordnik.swagger.runtime.common._
import com.wordnik.swagger.runtime.exception._

import java.io.IOException

import scala.collection.mutable._
import scala.collection.JavaConversions._


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author tony
 *
 */
object UserAPI {

    /**
     * Create user
     *
     * This can only be done by the logged in user.
     * 
     * @param postData  Created user object
 
     * @return  {@link } 
     * @throws APIException 
     */
     @MethodArgumentNames(value="postData") 
     @throws(classOf[APIException])
     def createUser(postData:User)  = {

        //parse inputs
        var resourcePath = "/user.{format}".replace("{format}","json")
        val method = "POST";
        var queryParams = new HashMap[String, String]
        var headerParams = new HashMap[String, String]

        
    
        //make the API Call
        APIInvoker.getApiInvoker.invokeAPI(resourcePath, method, queryParams, postData, headerParams)
        
                
     }
    /**
     * Creates list of users with given list input
     *
     * 
     * 
     * @param postData  List of user object
 
     * @return  {@link } 
     * @throws APIException 
     */
     @MethodArgumentNames(value="postData") 
     @throws(classOf[APIException])
     def createUsersWithListInput(postData:List[User])  = {

        //parse inputs
        var resourcePath = "/user.{format}/createWithList".replace("{format}","json")
        val method = "POST";
        var queryParams = new HashMap[String, String]
        var headerParams = new HashMap[String, String]

        
    
        //make the API Call
        APIInvoker.getApiInvoker.invokeAPI(resourcePath, method, queryParams, postData, headerParams)
        
                
     }
    /**
     * Get user by user name
     *
     * 
     * 
     * @param username  The name that needs to be fetched. Use user1 for testing.
 
     * @return User {@link User} 
     * @throws APIException 400 - Invalid username supplied 404 - User not found 
     */
     @MethodArgumentNames(value="username") 
     @throws(classOf[APIException])
     def getUserByName(username:String) :User = {

        //parse inputs
        var resourcePath = "/user.{format}/{username}".replace("{format}","json")
        val method = "GET";
        var queryParams = new HashMap[String, String]
        var headerParams = new HashMap[String, String]

        if(null != username) {
            resourcePath = resourcePath.replace("{username}", APIInvoker.toPathValue(username))
        }
        
    
        //make the API Call
        val response = APIInvoker.getApiInvoker.invokeAPI(resourcePath, method, queryParams, null, headerParams)
        if(null == response || response.length() == 0){
            null
        }        //create output objects if the response has more than one object
        val responseObject = APIInvoker.deserialize(response, classOf[User]).asInstanceOf[User]
        responseObject        
                
     }
    /**
     * Logs user into the system
     *
     * 
     * 
     * @param username  The user name for login
 @param password  The password for login in clear text
 
     * @return String {@link String} 
     * @throws APIException 400 - Invalid username and password combination 
     */
     @MethodArgumentNames(value="username, password") 
     @throws(classOf[APIException])
     def loginUser(username:String, password:String) :String = {

        //parse inputs
        var resourcePath = "/user.{format}/login".replace("{format}","json")
        val method = "GET";
        var queryParams = new HashMap[String, String]
        var headerParams = new HashMap[String, String]

        if(null != username) {
             queryParams += "username" -> APIInvoker.toPathValue(username)
        }
        if(null != password) {
             queryParams += "password" -> APIInvoker.toPathValue(password)
        }

        
    
        //make the API Call
        val response = APIInvoker.getApiInvoker.invokeAPI(resourcePath, method, queryParams, null, headerParams)
        if(null == response || response.length() == 0){
            null
        }        //create output objects if the response has more than one object
        val responseObject = APIInvoker.deserialize(response, classOf[String]).asInstanceOf[String]
        responseObject        
                
     }
    /**
     * Logs out current logged in user session
     *
     * 
     * 
     * 
     * @return  {@link } 
     * @throws APIException 
     */
     @throws(classOf[APIException])
     def logoutUser()  = {

        //parse inputs
        var resourcePath = "/user.{format}/logout".replace("{format}","json")
        val method = "GET";
        var queryParams = new HashMap[String, String]
        var headerParams = new HashMap[String, String]

        
    
        //make the API Call
        APIInvoker.getApiInvoker.invokeAPI(resourcePath, method, queryParams, null, headerParams)
        
                
     }

}